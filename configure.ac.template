dnl Process this file with autoconf to produce a configure script.
dnl Created by Anjuta application wizard.

AC_INIT(ClusteringSuite, @@VERSION_NUMBER@@, tools@bsc.es)

AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_SYSTEM

AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)
AC_CONFIG_HEADERS([clustering_suite_config.h])
AM_MAINTAINER_MODE

AC_ISC_POSIX
AC_PROG_CXX
AM_PROG_CC_STDC
AC_HEADER_STDC

dnl echo -n $VERSION>$srcdir/VERSION

AC_SUBST(PACKAGE)
AC_SUBST(VERSION)



dnl Check if CFLAGS/CXXFLAGS have been defined by user
AC_MSG_CHECKING([whether configure should try to set CFLAGS])
if test "x$CFLAGS" = "x"; then
  enable_cflags_setting=yes
else
  enable_cflags_setting=no
fi
AC_MSG_RESULT($enable_cflags_setting)

AC_MSG_CHECKING([whether configure should try to set CXXFLAGS])
if test "x$CXXFLAGS" = "x"; then
  enable_cxxflags_setting=yes
else
  enable_cxxflags_setting=no
fi
AC_MSG_RESULT($enable_cxxflags_setting)

dnl =========================================================================
dnl Architecture and OS detection
dnl =========================================================================

case "$host_cpu*" in
  i386*    ) Architecture="ia32"    ;;
  i486*    ) Architecture="ia32"    ;;
  i586*    ) Architecture="ia32"    ;;
  i686*    ) Architecture="ia32"    ;;
  powerpc* ) Architecture="powerpc" ;;
  ia64*    ) Architecture="ia64"    ;;
  alpha*   ) Architecture="alpha"   ;;
  mips*    ) Architecture="mips"    ;;
esac

case "x$host_os" in
  xlinux*  ) Operating_System="linux" ;;
  xaix*    ) Operating_System="aix"   ;;
  xosf*    ) Operating_System="dec"   ;;
  xirix*   ) Operating_System="irix"  ;;
  xdarwin* ) Operating_System="osx"   ;;
  xcygwin* ) Operating_System="cygwin";;
esac

AM_CONDITIONAL(ARCH_IA32,    test "${Architecture}"    = "ia32"    )
AM_CONDITIONAL(ARCH_POWERPC, test "${Architecture}"    = "powerpc" )
AM_CONDITIONAL(ARCH_IA64,    test "${Architecture}"    = "ia64"    )
AM_CONDITIONAL(ARCH_ALPHA,   test "${Architecture}"    = "alpha"   )
AM_CONDITIONAL(ARCH_MIPS,    test "${Architecture}"    = "mips"    )

AM_CONDITIONAL(OS_LINUX,     test "${OperatingSystem}" = "linux"   )
AM_CONDITIONAL(OS_AIX,       test "${OperatingSystem}" = "aix"     )
AM_CONDITIONAL(OS_DEC,       test "${OperatingSystem}" = "dec"     )
AM_CONDITIONAL(OS_IRIX,      test "${OperatingSystem}" = "irix"    )
AM_CONDITIONAL(OS_FREEBSD,   test "${OperatingSystem}" = "freebsd" )
AM_CONDITIONAL(OS_SOLARIS,   test "${OperatingSystem}" = "solaris" )
AM_CONDITIONAL(OS_MACOSX,    test "${OperatingSystem}" = "osx"     )
AM_CONDITIONAL(OS_CYGWIN,    test "${OperatingSystem}" = "cygwin"  )

case "x$host_os" in
  xlinux*  ) Operating_System="linux" ;;
  xaix*    ) Operating_System="aix"   ;;
  xosf*    ) Operating_System="dec"   ;;
  xirix*   ) Operating_System="irix"  ;;
  xdarwin* ) Operating_System="macosx"   ;;
  xcygwin* ) Operating_System="cygwin";;
esac


dnl =========================================================================
dnl Check the compiler binary type
dnl =========================================================================
AX_SELECT_BINARY_TYPE
AX_OFF_T_64BIT

dnl Check the existence of the next data types and its size
AC_CHECK_TYPES([long, long long, char, int, float, long float, double, long double])
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(long float)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(long double)
AC_CHECK_TYPES([int64_t, uint64_t, int8_t, uint8_t, int32_t, uint32_t, size_t])

dnl =========================================================================
dnl Check whether the compilers need additional parameters
dnl =========================================================================

AC_MSG_CHECKING([for additional options in compilers C/C++])
if test "x$enable_cflags_setting" = "yes"; then
  if test "$ac_compiler_gnu" = "yes" ; then
    ADDITIONAL_FLAGS_CC=""
    ADDITIONAL_FLAGS_CXX=""
  elif test "$CC" = "xlc" ; then
    ADDITIONAL_FLAGS_CC="-qcpluscmt"
    ADDITIONAL_FLAGS_CXX="-qstaticinline"
  elif test "$CC" = "cc" ; then
    if test "$Architecture" = "mips" -a "$Operating_System" = "irix" ; then
      ADDITIONAL_FLAGS_CC=""
      ADDITIONAL_FLAGS_CXX=""
    elif test "$Architecture" = "alpha" -a "$Operating_System" = "dec" ; then
      ADDITIONAL_FLAGS_CC=""
      ADDITIONAL_FLAGS_CXX=""
    fi
  fi
  CFLAGS="$CFLAGS $ADDITIONAL_FLAGS_CC"
  CXXFLAGS="$CXXFLAGS $ADDITIONAL_FLAGS_CXX"

  dnl Just to write a nice message to the user 
  if test "$ADDITIONAL_FLAGS_CC"  = "" ; then
    ADDITIONAL_FLAGS_CC="none"
  fi
  if test "$ADDITIONAL_FLAGS_CXX" = "" ; then
    ADDITIONAL_FLAGS_CXX="none"
  fi

  dnl Specific LDFLAGS for Intel C Compiler
  if test "$CC" = "icc" ; then
    LDFLAGS="-i-static $LDFLAGS"
  fi
fi


dnl =========================================================================
dnl Set default xxxFLAGS if not defined
dnl =========================================================================

if test "x$enable_cflags_setting" = "xyes"; then
  
  dnl Optimization
  CFLAGS="-g -O3 -Os"
fi

dnl Large files
if test "$Operating_System" = "cygwin"; then
  CFLAGS="$CFLAGS -D__LARGE64_FILES"
elif test "$Operating_System" = "linux" ; then
  CFLAGS="$CFLAGS -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE"
fi


if test "x$enable_cxxflags_setting" = "xyes"; then

  dnl Optimization
  CXXFLAGS="-g -O3 -Os"

fi

dnl Large files
if test "$Operating_System" = "cygwin"; then
  CXXFLAGS="$CXXFLAGS -D__LARGE64_FILES"
elif test "$Operating_System" = "linux" ; then
  CXXFLAGS="$CXXFLAGS -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE"
fi

AC_SUBST(Operating_System)

dnl =========================================================================
dnl Check for libxml
dnl =========================================================================

AM_PATH_XML2(
  [2.5.0],
  [AC_DEFINE([HAVE_XML2], [1], [Defined if libxml2 exists])],
  [AC_MSG_ERROR(Cannot find xml2-config of libXML 2.5.0 (or above))]
)
AX_PROG_XML2()
AM_PROG_LIBTOOL

dnl =========================================================================
dnl COMMON_FILES_DIR: point the compiling system where the tools 'common-files'
dnl directory is located
dnl =========================================================================

dnl AC_ARG_WITH(
dnl  [common-files-dir],
dnl  AS_HELP_STRING(
dnl    [--with-common-files-dir=LIB_DIR],
dnl    [force given directory as BSC Performance Tools common-files location]
dnl  ),
dnl  [
dnl  if test -d $withval; then
dnl    common_filesdir="$withval"
dnl  else
dnl    AC_MSG_ERROR(--with-common-files-dir expected directory name)
dnl  fi
dnl  ],
dnl  [
dnl    if test -d ../common-files; then
dnl      common_filesdir="`pwd`/../common-files"
dnl    else
dnl      AC_MSG_ERROR(
dnl        Unable to find 'common-files' directory. Please point it using
dnl        '--with-common-files-dir' option or copying it to the parent directory)
dnl    fi
dnl  ]
dnl )
dnl AC_SUBST(common_filesdir)

dnl =========================================================================
dnl LIBTOOLS: point the compiling system where the 'libtools' library
dnl is installed in the system
dnl
dnl NOTE: temporary disabled until the integration of the new common_files
dnl distribution. The 'pcfparser' is now embedded and requires the boost
dnl libraries
dnl =========================================================================
dnl AX_LIBTOOLS()
dnl CXXFLAGS="$CXXFLAGS $LIBTOOLS_CXXFLAGS"
dnl CFLAGS="$CFLAGS $LIBTOOLS_CFLAGS"

BOOST_REQUIRE(1.43)
CXXFLAGS="$CXXFLAGS $BOOST_CPPFLAGS"
CFLAGS="$CFLAGS $BOOST_CPPFLAGS"

dnl =========================================================================
dnl MUSTER_DIR: point the compiling system where the tools 'muster' includes
dnl an libs are located
dnl =========================================================================
AX_MUSTER()
AM_CONDITIONAL(HAVE_MUSTER, test "x$muster_enabled" = "xyes")

CLUSTERING_DYNAMIC_PATH="${prefix}/lib"

if test "x$muster_enabled" = "xyes"; then
  CLUSTERING_DYNAMIC_PATH="${CLUSTERING_DYNAMIC_PATH}:${MUSTER_LIBDIR}"
  CLUSTERING_RPATH="${CLUSTERING_RPATH} -R ${MUSTER_LIBDIR}"
fi

dnl =========================================================================
dnl AX_PROG_MPI: set if distributed version must be compiled
dnl =========================================================================
AX_PROG_MPI()

if test "x$MPI_INSTALLED" = "xyes"; then
  CLUSTERING_DYNAMIC_PATH="${CLUSTERING_DYNAMIC_PATH}:${MPI_LIBSDIR}:${MPI_LIBSDIR}/shared"
  CLUSTERING_RPATH="${CLUSTERING_RPATH} -R ${MPI_LIBSDIR} -R ${MPI_LIBSDIR}/shared"
fi

dnl =========================================================================
dnl AX_LIB_SQLITE3: check SQLite3 availability to support DB bursts storage
dnl =========================================================================
AX_LIB_SQLITE3()
if test "x$SQLITE3_VERSION" != "x"; then
  SQLITE3_INSTALLED="yes"
else
  SQLITE3_INSTALLED="no"
fi
AM_CONDITIONAL(HAVE_SQLITE3, test "$SQLITE3_INSTALLED" = "yes")

dnl =========================================================================
dnl AX_PROG_MRNETAPP: set directories of MRNetApp library to build TreeDBSCAN
dnl =========================================================================
AX_PROG_MRNETAPP()

AC_SUBST(CLUSTERING_DYNAMIC_PATH)
AC_SUBST(CGAL_DYNAMIC_PATH)
AC_SUBST(CLUSTERING_RPATH)

dnl NOTE: the 'pcfparser_svn1816' is a temporary dependency until the new
dnl 'common_files' package is defined

AC_CONFIG_FILES([
Makefile
include/Makefile
common_utilities/Makefile
pcfparser_svn1816/Makefile
src/Makefile
src/BasicClasses/Makefile
src/libParaverTraceParser/Makefile
src/libSharedComponents/Makefile
src/libSharedComponents/kalign2/Makefile
src/libANN/Makefile
src/libClustering/gmeans/Makefile
src/libClustering/Makefile
src/libTraceClustering/Makefile
src/ClusteringDataExtractor/Makefile
src/DBSCANParametersApproximation/Makefile
src/BurstClustering/Makefile
src/ClustersDiff/Makefile
src/ClustersSequenceScore/Makefile
scripts/Makefile
src/MusterDistributedClustering/Makefile
src/libDistributedClustering/Makefile
src/TreeDBSCAN/Makefile
src/TreeDBSCAN/scripts/Makefile
])

CFLAGS="-DCLUSTERING_SUITE $CFLAGS"
CXXFLAGS="-DCLUSTERING_SUITE $CXXFLAGS"

AC_OUTPUT
AX_SHOW_CONFIGURATION



