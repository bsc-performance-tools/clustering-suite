dnl Process this file with autoconf to produce a configure script.
dnl Created by Anjuta application wizard.

AC_INIT(ClusteringSuite, @@VERSION_NUMBER@@, tools@bsc.es)

AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_SYSTEM

dnl AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)
AM_INIT_AUTOMAKE
AC_CONFIG_HEADERS([clustering_suite_config.h])
AM_MAINTAINER_MODE

AC_ISC_POSIX
AC_PROG_CXX
AM_PROG_CC_STDC
AC_HEADER_STDC

dnl echo -n $VERSION>$srcdir/VERSION

AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

dnl =========================================================================
dnl Libtool availability
dnl =========================================================================
AM_PROG_LIBTOOL

dnl Check if CFLAGS/CXXFLAGS have been defined by user
AC_MSG_CHECKING([whether configure should try to set CFLAGS])
if test "x$CFLAGS" = "x"; then
  enable_cflags_setting=yes
else
  enable_cflags_setting=no
fi
AC_MSG_RESULT($enable_cflags_setting)

AC_MSG_CHECKING([whether configure should try to set CXXFLAGS])
if test "x$CXXFLAGS" = "x"; then
  enable_cxxflags_setting=yes
else
  enable_cxxflags_setting=no
fi
AC_MSG_RESULT($enable_cxxflags_setting)


dnl =========================================================================
dnl Main CLUSTERING flags to ensure the possible rpaths
dnl
dnl CLUSTERING_CLEAN_LDFLAGS is used to provide just the '-L' information
dnl without the libtool flags in the 'clustering-config' script
dnl 
dnl WARNNING!!! The CPPFLAGS used here should be changed to avoid using
dnl absolute PATHs
dnl
dnl =========================================================================
CLUSTERING_CPPFLAGS="-DCLUSTERING_SUITE -I`pwd`/include -I`pwd`/src/BasicClasses -I`pwd`/common_utilities"
CLUSTERING_CLEAN_LDFLAGS=""
CLUSTERING_LDFLAGS=""
CLUSTERING_LIBS=""
CLUSTERING_LD_LIBRARY_PATH=""

dnl =========================================================================
dnl Architecture and OS detection
dnl =========================================================================

case "$host_cpu*" in
  i386*    ) Architecture="ia32"    ;;
  i486*    ) Architecture="ia32"    ;;
  i586*    ) Architecture="ia32"    ;;
  i686*    ) Architecture="ia32"    ;;
  powerpc* ) Architecture="powerpc" ;;
  ia64*    ) Architecture="ia64"    ;;
  alpha*   ) Architecture="alpha"   ;;
  mips*    ) Architecture="mips"    ;;
esac

case "x$host_os" in
  xlinux*  ) Operating_System="linux" ;;
  xaix*    ) Operating_System="aix"   ;;
  xosf*    ) Operating_System="dec"   ;;
  xirix*   ) Operating_System="irix"  ;;
  xdarwin* ) Operating_System="osx"   ;;
  xcygwin* ) Operating_System="cygwin";;
esac

AM_CONDITIONAL(ARCH_IA32,    test "${Architecture}"    = "ia32"    )
AM_CONDITIONAL(ARCH_POWERPC, test "${Architecture}"    = "powerpc" )
AM_CONDITIONAL(ARCH_IA64,    test "${Architecture}"    = "ia64"    )
AM_CONDITIONAL(ARCH_ALPHA,   test "${Architecture}"    = "alpha"   )
AM_CONDITIONAL(ARCH_MIPS,    test "${Architecture}"    = "mips"    )

AM_CONDITIONAL(OS_LINUX,     test "${OperatingSystem}" = "linux"   )
AM_CONDITIONAL(OS_AIX,       test "${OperatingSystem}" = "aix"     )
AM_CONDITIONAL(OS_DEC,       test "${OperatingSystem}" = "dec"     )
AM_CONDITIONAL(OS_IRIX,      test "${OperatingSystem}" = "irix"    )
AM_CONDITIONAL(OS_FREEBSD,   test "${OperatingSystem}" = "freebsd" )
AM_CONDITIONAL(OS_SOLARIS,   test "${OperatingSystem}" = "solaris" )
AM_CONDITIONAL(OS_MACOSX,    test "${OperatingSystem}" = "osx"     )
AM_CONDITIONAL(OS_CYGWIN,    test "${OperatingSystem}" = "cygwin"  )

case "x$host_os" in
  xlinux*  ) Operating_System="linux" ;;
  xaix*    ) Operating_System="aix"   ;;
  xosf*    ) Operating_System="dec"   ;;
  xirix*   ) Operating_System="irix"  ;;
  xdarwin* ) Operating_System="macosx"   ;;
  xcygwin* ) Operating_System="cygwin";;
esac


dnl =========================================================================
dnl Check the compiler binary type
dnl =========================================================================
AX_SELECT_BINARY_TYPE
AX_OFF_T_64BIT

dnl Check the existence of the next data types and its size
AC_CHECK_TYPES([long, long long, char, int, float, long float, double, long double])
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(long float)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(long double)
AC_CHECK_TYPES([int64_t, uint64_t, int8_t, uint8_t, int32_t, uint32_t, size_t])

dnl =========================================================================
dnl Check whether the compilers need additional parameters
dnl =========================================================================

AC_MSG_CHECKING([for additional options in compilers C/C++])
if test "x$enable_cflags_setting" = "yes"; then
  if test "$ac_compiler_gnu" = "yes" ; then
    ADDITIONAL_FLAGS_CC=""
    ADDITIONAL_FLAGS_CXX=""
  elif test "$CC" = "xlc" ; then
    ADDITIONAL_FLAGS_CC="-qcpluscmt"
    ADDITIONAL_FLAGS_CXX="-qstaticinline"
  elif test "$CC" = "cc" ; then
    if test "$Architecture" = "mips" -a "$Operating_System" = "irix" ; then
      ADDITIONAL_FLAGS_CC=""
      ADDITIONAL_FLAGS_CXX=""
    elif test "$Architecture" = "alpha" -a "$Operating_System" = "dec" ; then
      ADDITIONAL_FLAGS_CC=""
      ADDITIONAL_FLAGS_CXX=""
    fi
  fi
  CFLAGS="$CFLAGS $ADDITIONAL_FLAGS_CC"
  CXXFLAGS="$CXXFLAGS $ADDITIONAL_FLAGS_CXX"

  dnl Just to write a nice message to the user 
  if test "$ADDITIONAL_FLAGS_CC"  = "" ; then
    ADDITIONAL_FLAGS_CC="none"
  fi
  if test "$ADDITIONAL_FLAGS_CXX" = "" ; then
    ADDITIONAL_FLAGS_CXX="none"
  fi

  dnl Specific LDFLAGS for Intel C Compiler
  if test "$CC" = "icc" ; then
    LDFLAGS="-i-static $LDFLAGS"
  fi
fi


dnl =========================================================================
dnl Set default xxxFLAGS if not defined
dnl =========================================================================

if test "x$enable_cflags_setting" = "xyes"; then
  
  dnl Optimization
  CFLAGS="-g -O3 -Os"
fi

dnl Large files
if test "$Operating_System" = "cygwin"; then
  CFLAGS="$CFLAGS -D__LARGE64_FILES"
elif test "$Operating_System" = "linux" ; then
  CFLAGS="$CFLAGS -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE"
fi


if test "x$enable_cxxflags_setting" = "xyes"; then

  dnl Optimization
  CXXFLAGS="-g -O3 -Os"

fi

dnl Large files
if test "$Operating_System" = "cygwin"; then
  CXXFLAGS="$CXXFLAGS -D__LARGE64_FILES"
elif test "$Operating_System" = "linux" ; then
  CXXFLAGS="$CXXFLAGS -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE"
fi

AC_SUBST(Operating_System)

dnl =========================================================================
dnl Check for Latex packages to generate the documentation
dnl =========================================================================

AC_CHECK_PROGS(pdflatex,[pdflatex],no)

AM_CONDITIONAL(BUILD_DOCS_PDF, test "${pdflatex}" != "no")
dnl AM_CONDITIONAL(BUILD_DOCS_PDF, test "${latex}" != "no" -a "${dvipdf}" != "no")
dnl AM_CONDITIONAL(BUILD_HTML_DOCS, test "${latex}" != "no" -a "${latex2html}" != "no")

dnl =========================================================================
dnl Check for libxml
dnl =========================================================================

AM_PATH_XML2(
  [2.5.0],
  [AC_DEFINE([HAVE_XML2], [1], [Defined if libxml2 exists])],
  [AC_MSG_ERROR(Cannot find xml2-config of libXML 2.5.0 (or above))]
)
AX_PROG_XML2()
dnl PKG_CHECK_MODULES([XML2], [libxml-2.0])


CLUSTERING_CPPFLAGS="${CLUSTERING_CPPFLAGS} ${XML2_CPPFLAGS}"
CLUSTERING_CLEAN_LDFLAGS="${CLUSTERING_CLEAN_LDFLAGS} -L${XML2_SHAREDLIBSDIR}"
CLUSTERING_LIBS="${CLUSTERING_LIBS} ${XML2_LIBS}"

AX_CHECK_IS_SYSTEM_LIBRARY_PATH([${XML2_SHAREDLIBSDIR}],[],
[
  CLUSTERING_LDFLAGS="${CLUSTERING_LDFLAGS} -L${XML2_SHAREDLIBSDIR} -R${XML2_SHAREDLIBSDIR}"
  CLUSTERING_LD_LIBRARY_PATH="{XML2_SHAREDLIBSDIR}"
])

dnl =========================================================================
dnl COMMON_FILES_DIR: point the compiling system where the tools 'common-files'
dnl directory is located
dnl =========================================================================

dnl AC_ARG_WITH(
dnl  [common-files-dir],
dnl  AS_HELP_STRING(
dnl    [--with-common-files-dir=LIB_DIR],
dnl    [force given directory as BSC Performance Tools common-files location]
dnl  ),
dnl  [
dnl  if test -d $withval; then
dnl    common_filesdir="$withval"
dnl  else
dnl    AC_MSG_ERROR(--with-common-files-dir expected directory name)
dnl  fi
dnl  ],
dnl  [
dnl    if test -d ../common-files; then
dnl      common_filesdir="`pwd`/../common-files"
dnl    else
dnl      AC_MSG_ERROR(
dnl        Unable to find 'common-files' directory. Please point it using
dnl        '--with-common-files-dir' option or copying it to the parent directory)
dnl    fi
dnl  ]
dnl )
dnl AC_SUBST(common_filesdir)

dnl =========================================================================
dnl LIBTOOLS: point the compiling system where the 'libtools' library
dnl is installed in the system
dnl
dnl NOTE: temporary disabled until the integration of the new common_files
dnl distribution. The 'pcfparser' is now embedded and requires the boost
dnl libraries
dnl =========================================================================
dnl AX_LIBTOOLS()
dnl CXXFLAGS="$CXXFLAGS $LIBTOOLS_CXXFLAGS"
dnl CFLAGS="$CFLAGS $LIBTOOLS_CFLAGS"


dnl =========================================================================
dnl Boost libraries are required to the pcfparser (based on Spirit)
dnl =========================================================================
BOOST_REQUIRE([1.36],
              [AC_MSG_ERROR([The ClusteringSuite package needs Boost, but
                             it was not found in your system])])

CLUSTERING_CPPFLAGS="${CLUSTERING_CPPFLAGS} ${BOOST_CPPFLAGS}"


dnl AX_BOOST_BASE(
dnl   [1.36],
dnl   [
dnl   CLUSTERING_CPPFLAGS="${CLUSTERING_CPPFLAGS} ${BOOST_CPPFLAGS}"
dnl   ]
dnl   ,
dnl   [AC_MSG_ERROR([The ClusteringSuite package needs Boost, but was it not found
dnl                  in your system])])

dnl echo "BOOST_LDFLAGS = ${BOOST_LDFLAGS}"


dnl =========================================================================
dnl MUSTER_DIR: point the compiling system where the tools 'muster' includes
dnl an libs are located
dnl =========================================================================
muster_installed="no"
AX_MUSTER(
  [muster_installed="yes"],
  [
    AC_MSG_WARN([No Muster library detected. Muster algorithms not available])
    muster_installed="no"
  ]
)
AM_CONDITIONAL([HAVE_MUSTER], [test "x$muster_installed" = "xyes"])

if test "x$muster_installed" = "xyes"; then

  CLUSTERING_CPPFLAGS="${CLUSTERING_CPPFLAGS} ${MUSTER_CPPFLAGS}"
  CLUSTERING_CLEAN_LDFLAGS="${CLUSTERING_CLEAN_LDFLAGS} -L${MUSTER_LIBSDIR}"
  CLUSTERING_LIBS="${CLUSTERING_LIBS} ${MUSTER_LIBS}"

  AX_CHECK_IS_SYSTEM_LIBRARY_PATH([${MUSTER_LIBSDIR}],[],
  [
    CLUSTERING_LDFLAGS="${CLUSTERING_LDFLAGS} -L${MUSTER_LIBSDIR} -R${MUSTER_LIBSDIR}"
    CLUSTERING_LD_LIBRARY_PATH="${CLUSTERING_LD_LIBRARY_PATH}:${MUSTER_LIBSDIR}"
  ])

fi

dnl =========================================================================
dnl AX_PROG_MPI: set if distributed version must be compiled
dnl =========================================================================
AX_PROG_MPI(
  [mpi_installed="yes"],
  [
    AC_MSG_WARN([No MPI installed. Distributed version will not be compiled])
    mpi_installed="no"
  ]
)

# If the system do not have MPICC (or similar) be sure to add -lmpi and -Impi
AM_CONDITIONAL(NEED_MPI_LIB_INCLUDE, test "x${MPICC}" != "x" )

dnl Did the checks pass?
AM_CONDITIONAL([HAVE_MPI], [test "x${mpi_installed}" = "xyes"])

if test "x$mpi_installed" = "xyes"; then

  CLUSTERING_CPPFLAGS="${CLUSTERING_CPPFLAGS} ${MPI_CPPFLAGS}"
  CLUSTERING_CLEAN_LDFLAGS="${CLUSTERING_CLEAN_LDFLAGS} -L${MPI_LIBSDIR} -L${MPI_LIBSDIR}/shared"
  CLUSTERING_LIBS="${CLUSTERING_LIBS} ${MPI_LIBS}"
  
  AX_CHECK_IS_SYSTEM_LIBRARY_PATH([${MPI_LIBSDIR}],[],
  [
    CLUSTERING_LDFLAGS="${CLUSTERING_LDFLAGS} -L${MPI_LIBSDIR} -R${MPI_LIBSDIR} -L${MPI_LIBSDIR}/shared -R${MPI_LIBSDIR}/shared"
    CLUSTERING_LD_LIBRARY_PATH="${CLUSTERING_LD_LIBRARY_PATH}:${MPI_LIBSDIR}"
  ])
  
fi

dnl =========================================================================
dnl AX_LIB_SQLITE3: check SQLite3 availability to support DB bursts storage
dnl =========================================================================
dnl AX_LIB_SQLITE3()
if test "x$SQLITE3_VERSION" != "x"; then

  sqlite3_installed="yes"
  CLUSTERING_CPPFLAGS="${CLUSTERING_CPPFLAGS} ${SQLITE3_CPPFLAGS}"
  CLUSTERING_CLEAN_LDFLAGS="${CLUSTERING_CLEAN_LDFLAGS} -L${SQLITE3_LIBSDIR}"
  CLUSTERING_LIBS="${CLUSTERING_LIBS} ${SQLITE3_LIBS}"
  
  AX_CHECK_IS_SYSTEM_LIBRARY_PATH([${SQLITE3_LIBSDIR}],[],
  [
    CLUSTERING_LDFLAGS="${CLUSTERING_LDFLAGS} -L${SQLITE3_LIBSDIR} -R${SQLITE3_LIBSDIR}"
    CLUSTERING_LD_LIBRARY_PATH="${CLUSTERING_LD_LIBRARY_PATH}:${SQLITE3_LIBSDIR}"
  ])
  
else
  sqlite3_installed="no"
fi
AM_CONDITIONAL([HAVE_SQLITE3], [test "x$sqlite3_installed" = "xyes"])

dnl =========================================================================
dnl 'enable-treedbscan': enables the compilation of the TreeDBSCAN (parallel
dnl                      implementation of DBSCAN) support.for Extrae >= 3.0
dnl =========================================================================

dnl First we set the availability to 'no', only if all dependencies are
dnl resolved, it will be set to yes

AC_ARG_ENABLE(
  treedbscan,
  AS_HELP_STRING(
    [--enable-treedbscan],
    [enable compilation of TreeDBSCAN support for Extrae >= 3.0. It requires
     'boost-thread', 'mpfr', 'gmp', 'cgal' and 'mrnetapp' libraries. Please
     check the different '--with-*' options to provide this requirements]
  ),
  [treedbscan_enabled="yes"],
  [treedbscan_enabled="no"]
)

dnl =========================================================================
dnl THE FOLLOWING CHECKS ARE ONLY REQUIRED WHEN COMPILING THE TreeDBSCAN
dnl =========================================================================

if test "x$treedbscan_enabled" = "xyes"; then

BOOST_THREAD()

dnl AX_BOOST_THREAD()

if test "x$BOOST_THREAD_LIBS" != "x"; then

  CLUSTERING_CLEAN_LDFLAGS="${CLUSTERING_CLEAN_LDFLAGS} -L${BOOST_THREAD_LDPATH}"
  CLUSTERING_LIBS="${CLUSTERING_LIBS} ${BOOST_THREAD_LIBS}"

  AX_CHECK_IS_SYSTEM_LIBRARY_PATH([${BOOST_THREAD_LDPATH}],[],
  [
    CLUSTERING_LDFLAGS="${CLUSTERING_LDFLAGS} -L${BOOST_THREAD_LDPATH} -R${BOOST_THREAD_LDPATH}"
    CLUSTERING_LD_LIBRARY_PATH="${CLUSTERING_LD_LIBRARY_PATH}:${BOOST_THREAD_LDPATH}"
  ])
else
  AC_MSG_ERROR([required Boost Thread library])
fi


dnl =========================================================================
dnl AX_LIB_MPFR: checks for the presence of MPFR, required to by CGAL.
dnl              (defined at 'config/gmp_mpfr.m4')
dnl =========================================================================

AX_LIB_MPFR(
  mpfr_enabled="yes",
  [
    AC_MSG_ERROR([required MPFR library not found])
    mpfr_enabled="no"
  ]
)

CLUSTERING_CPPFLAGS="${CLUSTERING_CPPFLAGS} ${MPFR_CPPFLAGS}"
CLUSTERING_CLEAN_LDFLAGS="${CLUSTERING_CLEAN_LDFLAGS} -L${MPFR_LIBSDIR}"
CLUSTERING_LIBS="${CLUSTERING_LIBS} ${MPFR_LIBS}"

AX_CHECK_IS_SYSTEM_LIBRARY_PATH([${MPFR_LIBSDIR}],[],
[
  CLUSTERING_LDFLAGS="${CLUSTERING_LDFLAGS} -L${MPFR_LIBSDIR} -R${MPFR_LIBSDIR}"
  CLUSTERING_LD_LIBRARY_PATH="${CLUSTERING_LD_LIBRARY_PATH}:${MPFR_LIBSDIR}"
])

dnl =========================================================================
dnl AX_LIB_GMP: checks for the presence of GMP, required to by CGAL
dnl             (defined at 'config/gmp_mpfr.m4')
dnl =========================================================================
AX_LIB_GMP(
  gmp_enabled="yes",
  [
    AC_MSG_ERROR([required GMP library not found])
    gmp_enabled="no"
  ]
)

CLUSTERING_CPPFLAGS="${CLUSTERING_CPPFLAGS} ${GMP_CPPFLAGS}"
CLUSTERING_CLEAN_LDFLAGS="${CLUSTERING_CLEAN_LDFLAGS} -L${GMP_LIBSDIR}"
CLUSTERING_LIBS="${CLUSTERING_LIBS} ${GMP_LIBS}"

AX_CHECK_IS_SYSTEM_LIBRARY_PATH([${GMP_LIBSDIR}],[],
[
  CLUSTERING_LDFLAGS="${CLUSTERING_LDFLAGS} -L${GMP_LIBSDIR} -R${GMP_LIBSDIR}"
  CLUSTERING_LD_LIBRARY_PATH="${CLUSTERING_LD_LIBRARY_PATH}:${GMP_LIBSDIR}"
])

dnl =========================================================================
dnl AX_CHECK_CGAL: checks for the presence of CGAL, required for the 
dnl                TreeDBSCAN implementation (defined at 'config/macros.m4')
dnl =========================================================================
AX_CHECK_CGAL(
  [cgal_enabled="yes"],
  [
    AC_MSG_ERROR([required CGAL library not found])
    cgal_enabled="no"
  ]
)
  
CLUSTERING_CPPFLAGS="${CLUSTERING_CPPFLAGS} ${CGAL_CPPFLAGS}"
CLUSTERING_CLEAN_LDFLAGS="${CLUSTERING_CLEAN_LDFLAGS} -L${CGAL_LIBSDIR}"
CLUSTERING_LIBS="${CLUSTERING_LIBS} ${CGAL_LIBS}"

AX_CHECK_IS_SYSTEM_LIBRARY_PATH([${CGAL_LIBSDIR}],[],
[
  CLUSTERING_LDFLAGS="${CLUSTERING_LDFLAGS} -L${CGAL_LIBSDIR} -R${CGAL_LIBSDIR}"
  CLUSTERING_LD_LIBRARY_PATH="${CLUSTERING_LD_LIBRARY_PATH}:${CGAL_LIBSDIR}"
  AC_SUBST(CGAL_LIBSDIR)
])

dnl =========================================================================
dnl AX_PROG_MRNETAPP: set directories of MRNetApp library to build TreeDBSCAN
dnl                   (defined at 'config/macros.m4')
dnl                   The different variables provided by this macro are
dnl                   directly used in the 'TreeDBSCAN/Makefile.am'
dnl =========================================================================
AX_PROG_MRNETAPP(
  [mrnetapp_enabled="yes"],
  [
    AC_MSG_ERROR([required MRNetApp library not found])
    mrnetapp_enabled="no"
  ]
)

fi

AM_CONDITIONAL([TREEDBSCAN_ENABLED], [test "x$mrnetapp_enabled" = "xyes"])


dnl =========================================================================
dnl Final substitutions of CLUSTERING flags
dnl =========================================================================
AC_SUBST(CLUSTERING_CPPFLAGS)
AC_SUBST(CLUSTERING_LDFLAGS)
AC_SUBST(CLUSTERING_CLEAN_LDFLAGS)
AC_SUBST(CLUSTERING_LIBS)
AC_SUBST(CLUSTERING_LD_LIBRARY_PATH)

dnl NOTE: the 'pcfparser_svn1816' is a temporary dependency until the new
dnl 'common_files' package is defined

AC_CONFIG_FILES([
Makefile
include/Makefile
common_utilities/Makefile
pcfparser_svn1816/Makefile
src/Makefile
src/BasicClasses/Makefile
src/libParaverTraceParser/Makefile
src/libSharedComponents/Makefile
src/libSharedComponents/kalign2/Makefile
src/libANN/Makefile
src/libClustering/gmeans/Makefile
src/libClustering/Makefile
src/libTraceClustering/Makefile
src/DBSCANParametersApproximation/Makefile
src/BurstClustering/Makefile
src/ClusteringDataExtractor/Makefile
src/ClustersDiff/Makefile
src/ClustersSequenceScore/Makefile
scripts/Makefile
src/MusterDistributedClustering/Makefile
src/libDistributedClustering/Makefile
src/TreeDBSCAN/Makefile
src/TreeDBSCAN/scripts/Makefile
doc/Makefile
])

AC_OUTPUT
AX_SHOW_CONFIGURATION



