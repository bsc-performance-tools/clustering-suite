/*****************************************************************************\
 *                        ANALYSIS PERFORMANCE TOOLS                         *
 *                             ClusteringSuite                               *
 *   Infrastructure and tools to apply clustering analysis to Paraver and    *
 *                              Dimemas traces                               *
 *                                                                           * 
 *****************************************************************************
 *     ___     This library is free software; you can redistribute it and/or *
 *    /  __         modify it under the terms of the GNU LGPL as published   *
 *   /  /  _____    by the Free Software Foundation; either version 2.1      *
 *  /  /  /     \   of the License, or (at your option) any later version.   *
 * (  (  ( B S C )                                                           *
 *  \  \  \_____/   This library is distributed in hope that it will be      *
 *   \  \__         useful but WITHOUT ANY WARRANTY; without even the        *
 *    \___          implied warranty of MERCHANTABILITY or FITNESS FOR A     *
 *                  PARTICULAR PURPOSE. See the GNU LGPL for more details.   *
 *                                                                           *
 * You should have received a copy of the GNU Lesser General Public License  *
 * along with this library; if not, write to the Free Software Foundation,   *
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA          *
 * The GNU LEsser General Public License is contained in the file COPYING.   *
 *                                 ---------                                 *
 *   Barcelona Supercomputing Center - Centro Nacional de Supercomputacion   *
\*****************************************************************************/

/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- *\

  $URL:: https://svn.bsc.#$:  File
  $Rev:: 20               $:  Revision of last commit
  $Author:: jgonzale      $:  Author of last commit
  $Date:: 2010-03-09 17:1#$:  Date of last commit

\* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */


#include "libTraceClusteringImplementation.hpp"
#include "libTraceClustering.hpp"

#include <ParametersManager.hpp>

#include <stdio.h>

/**
 * Empty constructor
 */
libTraceClustering::libTraceClustering(bool verbose)
{
  Implementation  = new libTraceClusteringImplementation(verbose);
  Error = Warning = false;
}

/**
 * Initializes the clustering library, loading the XML where different parts
 * are defined
 *
 * \param ClusteringDefinitionXML Name of the XML where clustering is defined
 * \param ApplyCPIStack Boolean seting if PPC970 CPI stack counters should be extrapolated
 *
 * \return True if the initialization finished properly. False otherwise
 */
bool
libTraceClustering::InitTraceClustering(string        ClusteringDefinitionXML,
                                        unsigned char UseFlags)
{
  if (!Implementation->InitTraceClustering(ClusteringDefinitionXML, UseFlags))
  {
    Error        = true;
    ErrorMessage = Implementation->GetLastError();
    return false;
  }

  if (Implementation->GetWarning())
  {
    Warning = true;
    WarningMessage = Implementation->GetLastWarning();
  }
  
  return true;
}

/**
 * Load the data to memory from the provided input file. It could be a Paraver trace,
 * a Dimemas trace or a CSV previously generated by the clustering tool
 * \param InputFileName Name of the input file where data is located
 * \return True if data extraction worked properly. False otherwise
 */
bool
libTraceClustering::ExtractData(string InputFileName)
{
  /* Extract data to memory */
  if (!Implementation->ExtractData(InputFileName))
  {
    Error        = true;
    ErrorMessage = Implementation->GetLastError();
    return false;
  }

  return true;
}

/**
 * Load the data to memory from the provided input file and flushes it to the
 * desired output file as a CSV.
 * \param InputFileName Name of the input file where data is located
 * \param OutputFileName Name of the output (CSV) file
 * \return True if data extraction and output file generation worked properly. False otherwise
 */
bool
libTraceClustering::ExtractData(string InputFileName, string OutputCSVFileName)
{
  /* Extract data to memory */
  if (!Implementation->ExtractData(InputFileName))
  {
    Error        = true;
    ErrorMessage = Implementation->GetLastError();
    return false;
  }

  return true;
}

/**
 * Performs a single cluster analysis
 *
 * \result True if the analysis finished correctly, false otherwise
 */
bool libTraceClustering::ClusterAnalysis()
{
  if (!Implementation->ClusterAnalysis())
  {
    Error = true;
    ErrorMessage = Implementation->GetLastError();
    return false;
  }
  
  return true;
}

/**
 * Write data to output file (trace or CSV)
 *
 * \param OutputFileName Name of the output file where data will be written
 *
 * \result True if output file is written correctly, false otherwise
 */
bool libTraceClustering::FlushData(string OutputFileName)
{
  if (!Implementation->FlushData(OutputFileName))
  {
    Error = true;
    ErrorMessage = Implementation->GetLastError();
    return false;
  }

  return true;
}

/**
 * Generates an output trace adding the cluster analysis information to the input trace
 *
 * \param OutputTraceName Name of the output trace file
 *
 * \result True if reconstruction worked properly, false otherwise
 */
bool libTraceClustering::ReconstructInputTrace(string OutputTraceName)
{
  if (!Implementation->ReconstructInputTrace(OutputTraceName))
  {
    Error = true;
    ErrorMessage = Implementation->GetLastError();
    return false;
  }
  
  return true;
}

/**
 * Print the plot scripts for GNUPlot defined in the XML
 * 
 * \param DataFileName Name of the file containg the data to plot
 * \param ScriptsFileNamePrefix Prefix of the output scripts
 *
 * \result True if the scripts where printed correctly, false otherwise
 */
bool libTraceClustering::PrintPlotScripts(string DataFileName, string ScriptsFileNamePrefix)
{
  if (!Implementation->PrintPlotScripts(DataFileName, ScriptsFileNamePrefix))
  {
    Error = true;
    ErrorMessage = Implementation->GetLastError();
    return false;
  }

  return true;
}

/**
 * Returns the string containing the last error message
 * \return Last error message
 */
string
libTraceClustering::GetErrorMessage(void)
{
  return ErrorMessage;
}

/**
 * Returns the string containing the last warning message
 * \return Last warning message
 */
string
libTraceClustering::GetWarningMessage(void)
{
  return WarningMessage;
}
